{
  "hash": "30d0d4ecf9e986b569b7e7d8df66844e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: OpenCV\nauthor: Samith Va\ndate: '2024-03-23'\ncategories:\n  - openCV\n  - Deep Learning\nformat:\n  html:\n    code-fold: false\n---\n\nWhat is OpenCV?\n: OpenCV (Open Source Computer Vision Library) is an open-source computer vision and machine learning software library. It provides a wide range of functionalities for image and video processing. \n\nHere's a crash course on using OpenCV in Python.\n\n## Installation:\nInstall OpenCV for Python via pip: `pip install opencv-python`\n\n## Basic Operations\n1. Reading and displaying image\n\n```python\nimport cv2\n# Read an image from file\nimage = cv2.imread('image.jpg')\n\n# Display the image in a window\ncv2.imshow('Image', image)\n\n# Wait for a key press and then close the window\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n![Output](image.jpg){width=30%}\n\n2. Writing image\n```python\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Write the image to a file\ncv2.imwrite('output_image.jpg', image)\n```\n3. Coverting color spaces\n\nOpenCV provides functions to convert images between different color spaces, such as RGB, BGR, HSV, etc.\n\n```python\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Convert BGR to grayscale\ngray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Convert BGR to HSV\nhsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\ncv2.imwrite('gray_image.jpg', gray_image)\ncv2.imwrite('hsv_image.jpg', hsv_image)\n```\n::: {layout-ncol=2 layout-valign=\"bottom\"}\n![Grey](gray_image.jpg)\n\n![HSV](hsv_image.jpg)\n:::\n\n4. Resizing and Cropping Images\n\nResize images to a specific width and height or by a scaling factor. Cropping involves selecting a region of interest (ROI) from the image.\n\n```python\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Resize the image to a specific width and height\nnew_width, new_height = 200, 200\nresized_image = cv2.resize(image, (new_width, new_height))\n\n# Resize the image by a scaling factor\nscale_percent = 50  # percent of original size\nwidth = int(image.shape[1] * scale_percent / 100)\nheight = int(image.shape[0] * scale_percent / 100)\nresized_image = cv2.resize(image, (width, height))\ncv2.imwrite('resized.jpg', resized_image)\n\n# Crop a region of interest (ROI) from the image\nx, y, w, h = 100, 100, 200, 200  # Example coordinates and dimensions\ncropped_image = image[y:y+h, x:x+w]\ncv2.imwrite('cropped.jpg', cropped_image)\n\n```\n\n::: {layout-ncol=2 layout-valign=\"bottom\"}\n![Resized](resized.jpg)\n\n![Cropped](cropped.jpg)\n:::\n\n\n5. Reading and Displaying Videos\n```python\nimport cv2\n\n# Open a video file\ncap = cv2.VideoCapture('video.mp4')\n\nwhile cap.isOpened():\n    ret, frame = cap.read()\n    if not ret:\n        break\n    cv2.imshow('Video', frame)\n    if cv2.waitKey(25) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n\n```\n\n\nFore more reference, visit [OpenCV Documentation](https://docs.opencv.org/4.x/index.html)\n\n",
    "supporting": [
      "open-cv_files"
    ],
    "filters": [],
    "includes": {}
  }
}