[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Numpy",
    "section": "",
    "text": "What is numpy?\n\nNumPy is the fundamental package for scientific computing in Python. The core of Numpy is the ndarray object, operations of this array are being performed in compiled code for performance.\n\nHow Numpy differ from standard Python sequences ? Why using numpy ?\n\nThere are several different between Numpy and standard Python sequences:\n\n\n\nNumPy arrays have a fixed size at creation, unlike Python lists (which can grow dynamically)\nElements within the same Numpy array must be the same data type.\nAdvanced mathematics operations can be done easily in Numpy (with less code and good performance)\nA growing plethora of scientific and mathematical libraries\n\n\nWhy is numpy fast ?\n\nVectorization describes the absence of any explicit looping, indexing, etc., in the code - these things are taking place, of course, just “behind the scenes” in optimized, pre-compiled C code. Vectorized code has many advantages, among which are:\n\n\n\nVectorized code is more concise and easier to read (shorter code without a lot of for loops)\nFewer lines of code generally means fewer bugs"
  },
  {
    "objectID": "posts/deep-learning-journey/index.html",
    "href": "posts/deep-learning-journey/index.html",
    "title": "Deep Learning Journey",
    "section": "",
    "text": "Keywords: architecture, overfit, fine-tunning, validation set, test set, weights, parameters, CNN\n\nIntroduction\nDeep learning is common in these day technology. It has been applied in many field such as Computer Vision (CV), Natural language processing (NLP) as well as in Medicine. The first idea of neurons network came from Pitts and McCulloch. Mark I Perceptron The first artificial neuron network was built using the concept from Pitts and McCulloch, but the Perceptron was a single layer neuron network and it couldn’t learn some simple functions (such as XOR).\nPitts and McCulloch form the neurons network idea.\n\n… Trying to spend too much time on theory can be counterproductive. The key is to just code and try to solve problems: the theory can come later when you have context and motivation.\n\nFive areas that DL are good at: natural language processing, medical, security(computer vision), factory(industrial | anomaly detection) and recommendation system(commercial).\n\nThe first device that was based on the principle of the artificial neuron is : The Mark I Perceptron.\nRequirements for the parallel distributed processing:\n\na set of processing unit\na state of activation\nan output function for each unit\na pattern of connectivity between units\n\nTwo theoretical misunderstandings that held back the field of neuron networks is:\n\nadding one more layers (2 layer) then it will be possible to approximate any function.\nAdding more layers to make model better\n\nGPU is a kind of processor which can do the parallel computing, it is commonly used in training the model.\nBecause traditional computer does not come with a GPU, hence its computation speed is slow and inefficient.\nSamuel mean by “weight assignment” refer to setting the value of variable on how the function works/behave.\n“weight” is refer to “parameters” in deep learning.\nBecause some problems such as image recognition, we unconsciously know how our brain can recognize patterns in images.\nUniversal approximation theorem.\nData(input) and labels(model output references).\nUsing feedback loop can be problematic, more biased of dataset, the more biased of the model.\nNo, we can use any size, using image of size 264x264 is due to historical reason (traditional model can only trained using 264x264 size).\nClassification : is for predicting the categories of dataset while Regression predict numerical value.\nValidation set is an less exposed data set which is used to find the optimal hyperparameters of various architectures of model. Test set is used to predict the unseen data and evaluate the model overall performance.\nFastai will automatically set the validation set to 0.2 (20%).\nNo, we can’t. A counter case is training with time-series data which is too easy for model to to fill the gap, when we select random validation instances.\nOverfitting is a problem when the model perform very well on training data set but poorly in predicting unseen data. An example : when a model is trained to decide the image is cat or dog, model can only accurately make a classification when given an instance within train dataset. But fail when given cat or dog image outside the training set.\nMetric is a version of loss which used for human consumption, it can be error percentage or accuracy.\nUsing pre-trained model, can increase inefficiency, because pretrained model (already has more capability)can already recognize basic patterns of data.\nHead of a model is the last layer of the model. Note that we need to change the head of model (one or more layers to make it suitable for specifics task of the model) while using pre-trained model.\nThe first layer of CNN, it determines diagonal, horizontal, and vertical edges as well as various gradients. 2nd layer the model detects features within the image such as circle, triangle etc.\nImage models not only useful for photos, for instance, voice signal can also express in term of spectrum in images.\nArchitecture is the pre assume functions or structure of the model.\nSegmentation is task where photos are divided and recognized into small components labels. For example, self driving car might use video data and do the segmentation recognize the pedestrian and adjust direction or speed.\ny_range is used for setting a range in label for specific task.\nHyperparameters are the specification of the model that are manually set by human such as model architecture, learning rate, hidden layers number etc.\nBest way to avoid failures when using AI in an organization is to keep a test dataset separately(without intervening with training process)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "OpenCV\n\n\n\n\n\n\nopenCV\n\n\nDeep Learning\n\n\n\n\n\n\n\n\n\nMar 23, 2024\n\n\nSamith Va\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy\n\n\n\n\n\n\nnumpy\n\n\npython\n\n\nvectorization\n\n\n\n\n\n\n\n\n\nMar 22, 2024\n\n\nSamith Va\n\n\n\n\n\n\n\n\n\n\n\n\nDeep Learning Journey\n\n\n\n\n\n\ndeep learning\n\n\npytorch\n\n\nfastai\n\n\n\n\n\n\n\n\n\nMar 21, 2024\n\n\nSamith Va\n\n\n\n\n\n\n\n\n\n\n\n\nEffects of Nonlinearity\n\n\n\n\n\n\nRF\n\n\nNonlinearity\n\n\n\n\n\n\n\n\n\nMar 21, 2024\n\n\nSamith Va\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/rf-nonlinearity/nonlinearity.html",
    "href": "posts/rf-nonlinearity/nonlinearity.html",
    "title": "Effects of Nonlinearity",
    "section": "",
    "text": "How to calculate power gain and voltage gain? Are they equivalent?\nWhat is absolute power gain ? What is its unit quantity?\nWhat are peak amplitude, peak-to-peak amplitude, rms value ?\nIs a switch a non-linear system ?\nWhat is a mixer in context of communication system ?\nWhat is a transceiver ? Draw its structure diagram.\nWhat is PA ? LNA ? What are their differences  ?\nIs mixer a LTI system ? And why ?\nWhat is the Fourier series of a rectangular waveform ?\nWhat is 1dB compression point \\(P_\\text{1dB}\\)? Derive its formula\nWhat is the coefficient fundamental term of a nonlinear system ?\nWhat is the difference between intermodulation and cross modulation?\nWhat is third intercept point ?\nMemoryless = static ~= dynamic Tone = unmodulated signal (pure sine or cosine)"
  },
  {
    "objectID": "posts/rf-nonlinearity/nonlinearity.html#answer",
    "href": "posts/rf-nonlinearity/nonlinearity.html#answer",
    "title": "Effects of Nonlinearity",
    "section": "Answer",
    "text": "Answer\n\nRefer to above equations.\nRefer to above equations.\nWhat are Peak amplitude, peak-to-peak amplitude, rms value ?\nunambiguous question, switch can be linear or non-linear depends on the input of interest.\nWhat is a mixer in context of communication system ?\nTransceiver is the combination of Tx, and Rx. \nWhat is PA ? LNA ? What are their differences  ?\na mixer is frequency shift component. we can prove that it does not satisfy the linear property."
  },
  {
    "objectID": "posts/welcome/index.html#reshape",
    "href": "posts/welcome/index.html#reshape",
    "title": "Numpy",
    "section": "Reshape",
    "text": "Reshape\nnp.reshape() reshape a numpy array to specific given shape (n, m). In neural network when dealing with images, we usually need to flatten the image into 1 row array by using .reshape(-1).\n\nimport numpy as np\n# Create a 2D array\ny = np.array([[1, 2, 3, 4],\n              [5, 6, 7, 8],\n              [9, 10, 11, 12]])\n# Reshape the array to 1D using -1\nflattened_y = y.reshape(-1)\nflattened_y\n\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])"
  },
  {
    "objectID": "posts/welcome/index.html#np.reshape",
    "href": "posts/welcome/index.html#np.reshape",
    "title": "Numpy",
    "section": "np.reshape()",
    "text": "np.reshape()\nnp.reshape() reshape a numpy array to specific given shape (n, m). In neural network when dealing with images, we usually need to flatten the image into 1 row array by using .reshape(-1).\n\nimport numpy as np\n# Create a 2D array\ny = np.array([[1, 2, 3, 4],\n              [5, 6, 7, 8],\n              [9, 10, 11, 12]])\n# Reshape the array to 1D using -1\nflattened_y = y.reshape(-1)\nflattened_y\n\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])"
  },
  {
    "objectID": "posts/welcome/index.html#np.where",
    "href": "posts/welcome/index.html#np.where",
    "title": "Numpy",
    "section": "np.where()",
    "text": "np.where()\nnp.where() perform conditional operations on arrays and is somewhat similar to the ternary conditional operator (condition ? value_if_true : value_if_false) found in many programming languages.\n\nimport numpy as np\na = np.arange(10)\nb = np.where(a&gt;5, a, a**2)\nb\n\narray([ 0,  1,  4,  9, 16, 25,  6,  7,  8,  9])\n\n\nFor more references visit Numpy Documentation"
  },
  {
    "objectID": "posts/welcome/index.html#linspace",
    "href": "posts/welcome/index.html#linspace",
    "title": "Numpy",
    "section": "Linspace",
    "text": "Linspace\nnp.linspace(start, end, interval) creates an array with evenly spaced float numbers over a specified interval.\n\nimport numpy as np\na = np.linspace(10,100,10)\na\n\narray([ 10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])"
  },
  {
    "objectID": "posts/welcome/index.html#where",
    "href": "posts/welcome/index.html#where",
    "title": "Numpy",
    "section": "Where",
    "text": "Where\nnp.where() perform conditional operations on arrays and is somewhat similar to the ternary conditional operator (condition ? value_if_true : value_if_false) found in many programming languages.\n\nimport numpy as np\na = np.arange(10)\nb = np.where(a&gt;5, a, a**2)\nb\n\narray([ 0,  1,  4,  9, 16, 25,  6,  7,  8,  9])\n\n\nFor more references visit Numpy Documentation"
  },
  {
    "objectID": "posts/open-cv/open-cv.html",
    "href": "posts/open-cv/open-cv.html",
    "title": "OpenCV",
    "section": "",
    "text": "What is OpenCV?\n\nOpenCV (Open Source Computer Vision Library) is an open-source computer vision and machine learning software library. It provides a wide range of functionalities for image and video processing.\nHere’s a crash course on using OpenCV in Python."
  },
  {
    "objectID": "posts/open-cv/open-cv.html#installation",
    "href": "posts/open-cv/open-cv.html#installation",
    "title": "OpenCV",
    "section": "Installation:",
    "text": "Installation:\nInstall OpenCV for Python via pip: pip install opencv-python"
  },
  {
    "objectID": "posts/open-cv/open-cv.html#basic-operations",
    "href": "posts/open-cv/open-cv.html#basic-operations",
    "title": "OpenCV",
    "section": "Basic Operations",
    "text": "Basic Operations\n\nReading and displaying image\n\nimport cv2\n# Read an image from file\nimage = cv2.imread('image.jpg')\n\n# Display the image in a window\ncv2.imshow('Image', image)\n\n# Wait for a key press and then close the window\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\n\n\nOutput\n\n\n\nWriting image\n\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Write the image to a file\ncv2.imwrite('output_image.jpg', image)\n\nCoverting color spaces\n\nOpenCV provides functions to convert images between different color spaces, such as RGB, BGR, HSV, etc.\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Convert BGR to grayscale\ngray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Convert BGR to HSV\nhsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\ncv2.imwrite('gray_image.jpg', gray_image)\ncv2.imwrite('hsv_image.jpg', hsv_image)\n\n\n\n\n\n\n\n\n\nGrey\n\n\n\n\n\n\n\nHSV\n\n\n\n\n\n\nResizing and Cropping Images\n\nResize images to a specific width and height or by a scaling factor. Cropping involves selecting a region of interest (ROI) from the image.\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Resize the image to a specific width and height\nnew_width, new_height = 200, 200\nresized_image = cv2.resize(image, (new_width, new_height))\n\n# Resize the image by a scaling factor\nscale_percent = 50  # percent of original size\nwidth = int(image.shape[1] * scale_percent / 100)\nheight = int(image.shape[0] * scale_percent / 100)\nresized_image = cv2.resize(image, (width, height))\ncv2.imwrite('resized.jpg', resized_image)\n\n# Crop a region of interest (ROI) from the image\nx, y, w, h = 100, 100, 200, 200  # Example coordinates and dimensions\ncropped_image = image[y:y+h, x:x+w]\ncv2.imwrite('cropped.jpg', cropped_image)\n\n\n\n\n\n\n\n\n\nResized\n\n\n\n\n\n\n\nCropped\n\n\n\n\n\n\nReading and Displaying Videos\n\nimport cv2\n\n# Open a video file\ncap = cv2.VideoCapture('video.mp4')\n\nwhile cap.isOpened():\n    ret, frame = cap.read()\n    if not ret:\n        break\n    cv2.imshow('Video', frame)\n    if cv2.waitKey(25) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\nFore more reference, visit OpenCV Documentation"
  }
]